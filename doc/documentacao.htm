<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>Documentação - Ludo</title>
    <!-- <script src="documentacao.md"></script> -->
    <link rel="stylesheet" href="assets/github-markdown.css">
    <script src="assets/marked.js"></script>
</head>

<body>
    <div id="content" class="markdown-body"><h1 id="ludo---linguagem-de-programação-i">Ludo - Linguagem de Programação I</h1>
<p>Este documento descreve os requisitos e apresenta uma visão geral do 
trabalho da Disciplina de Linguagem de Programação I, sob orientação do 
professor Alan Moraes da Universidade Federal da Paraíba.</p>
<p>Documento desenvolvido como atividade da monitoria de Victor José de Sousa Koehler.</p>
<p><img src="assets/tabuleiro.png" alt="Tabuleiro"></p>
<p><em>Fig. 1: Tabuleiro convencional de Ludo</em></p>
<hr>
<h2 id="especificações-do-trabalho">Especificações do Trabalho</h2>
<h3 id="introdução">Introdução</h3>
<p>O jogo é constituído de 2 a 4 jogadores, cada um possuindo 4 
peões/peças, e o objetivo é cada um dos peões para o centro do tabuleiro
 dando uma volta completa partindo do ponto de início de cada 
jogador/cor:</p>
<p><img src="assets/direcao.png" alt="Objetivo Geral"></p>
<p><em>Fig. 2: Direção de movimento das peças.</em></p>
<h3 id="considerações-iniciais">Considerações Iniciais</h3>
<p>Este pacote contém o "framework" na qual o trabalho deve ser 
implementado. Toda a lógica da interface gráfica já se encontra pronta e
 funcionando, cabendo aos discentes implementar as regras do jogo Ludo 
propriamente dito. Isto é, ao executar o projeto, os alunos encontrarão a
 seguinte tela:</p>
<p><img src="assets/beta.png" alt="Beta"></p>
<p><em>Fig. 3: Janela da aplicação.</em></p>
<p>Como pode ser percebido ao interagir com esta janela, não há regras 
em funcionamento: ao clicar nos dados eles serão arbitrariamente 
alterados e ao clicar em alguma peça, ela se moverá de acordo com os 
dados.</p>
<p>A imagem abaixo contém as terminologias usadas neste documento e em todo o código-fonte escrito:</p>
<p><img src="assets/referencia.png" alt="Referências"></p>
<p><em>Fig. 4: Terminologias do projeto.</em></p>
<h3 id="regras">Regras</h3>
<p>Esta é uma implementação simples de Ludo. As regras estão listadas a 
seguir de maneira objetiva. Caso a leitura se demonstre cansativa, 
sugere-se que o leitor tente buscar na Internet alguma fonte mais 
simples como base para ser introduzido ao jogo.
Adverte-se, no entanto, que devido ao grande número de variações e 
particularidades do jogo presente mundo afora, as regras a seguir terão 
precedência sobre quaisquer outras. Interpretações próprias e 
modificações nas regras devem ser discutidas com o docente:</p>
<ul>
<li><p>Cada jogador começa com 4 peças na sua guarita.</p>
</li>
<li><p>Os jogadores se revezam em turnos para jogar os dados.</p>
</li>
<li><p>Toda vez que um jogador joga os dados, ele é obrigado a fazer 
algum movimento com os dados que obteve (isto é, ele não pode deixar 
perder a vez de propósito)</p>
</li>
<li><p>Ao jogar os dados, soma-se os seus valores. Depois o jogador pode
 escolher uma peça no tabuleiro (fora da guarita) para se mover 
exatamente X casas, onde X é a soma dos dados, seguindo a direção 
horária (ver Fig. 2). Caso o jogador não tenha peças no tabuleiro, perde
 a vez.</p>
</li>
<li><p><strong>Entretanto</strong>, quando um jogador obtém dados iguais (isto é, quando ele tira 6-6, 5-5, etc), ele possui duas opções:</p>
<ol>
<li>Escolhe uma peça para sair da guarita, colocando-a na casa de início de sua cor (na imagem de referência, "<strong>Casa (saída da guarita)</strong>"
 ). Após tirar a peça da guarita e colocá-la no jogo, deve jogar os 
dados novamente para decidir quantas casas a dita peça irá se mover 
(partindo do início, é claro).</li>
<li>Escolhe uma peça qualquer no tabuleiro (fora da guarita) para 
movê-la normalmente. Após isso, o jogador terá outra chance para lançar 
os dados (isto é, ele ganha o direito de jogar duas vezes). Se, por 
acaso, ele tirar novamente dados iguais, repete-se esse processo.</li>
</ol>
</li>
<li><p>Como consequência do passo anterior, se todos os peões do jogador
 estiverem na guarita, ele precisará tirar dados iguais para conseguir 
tirar um de lá. Senão, perde a vez. Isso também se aplica no início do 
jogo, onde todas as peças estão na guarita.</p>
</li>
<li><p>Se, após o lançamento dos dados e escolha de uma peça <strong>P</strong> para se mover, houver uma peça adversária <strong>Q</strong> na casa de destino onde <strong>P</strong> irá se inserir, então <strong>P</strong> irá "comer" <strong>Q</strong>: ela volta para a guarita de sua respectiva cor, e <strong>P</strong> assume o lugar anterior dela.</p>
</li>
<li><p>Não é permitida a uma peça "comer" outra do mesmo jogador.</p>
</li>
<li><p>Não existe o conceito de torres, empilhamento ou outras 
variações: Uma casa pode possuir no máximo uma peça em cima dela. 
(Exceto a casa final, a qual será discutida mais a frente)</p>
</li>
<li><p>Ao dar <em>(quase)</em> uma volta completa no tabuleiro, o peão 
que chega a entrada da casa segura (uma estrela, ver Fig. 4) continuará 
seu caminho pela "zona segura", isto é, pelas casas que possuem a mesma 
cor do peão.</p>
</li>
<li><p>Um peão só pode entrar em uma "zona segura" de sua mesma cor. 
(Por isso o nome zona segura: adversários não podem comer as peças de um
 jogador dentro da zona).</p>
</li>
<li><p>As casas da zona segura possuem a característica de ir e voltar:</p>
<p>Por exemplo, ao tirar 5 na soma dos dados, uma peça que recém entrou 
na zona segura vai sobrepassar a casa final e vai começar a "voltar". <strong>Este estado não persiste entre turnos:</strong>
 na próxima vez que o jogador escolher esta peça para jogar, ela se 
moverá em direção a casa final normalmente (isto é, o jogador precisará 
tentar achar a soma certeira nos dados para levar esta peça a casa 
final).</p>
<p><img src="assets/flow.png" alt="Uma peça voltando"></p>
</li>
<li><p>Cumprindo o objetivo de levar todas as peças a casa final (que 
por sua vez, "permite" o "empilhamento" de várias peças), o jogador 
vence o jogo (e os demais jogadores).</p>
</li>
</ul>
<hr>
<h2 id="o-framework">O Framework</h2>
<p>Os alunos devem fazer as modificações que se fizerem necessárias para
 implementar as regras do jogo somente nas classes que tratam do modelo 
do jogo diretamente e <strong>não</strong> possuem implementações de GUI, o que corresponde as classes mais a esquerda na imagem abaixo.</p>
<p><img src="assets/bluej.png" alt="BlueJ"></p>
<p>Neste trabalho, é fortemente desencorajado fazer mudanças nas classes
 que tratam da GUI (a direita na imagem), principalmente se o objetivo 
das alterações for implementar uma das regras básicas descritas acima.</p>
<p>No entanto, não é proibido fazer alterações estéticas ou melhorias 
simples (por exemplo, trocar as cores ou imagens) na GUI se o aluno 
desejar, embora isso não implique, necessariamente, que o trabalho 
ganhará pontos extras (Consultar o professor). Recomenda-se, nesses 
casos, que o aluno dê prioridade em terminar o mínimo exigido nas regras
 do trabalho e sempre mantenha backups das diferentes versões.</p>
<h3 id="documentação">Documentação</h3>
<p>O Javadoc gerado a partir do código-fonte pode ser encontrado aqui:
<a href="javadoc/index.html">javadoc/index.html</a></p>
<p>Nestes documentos, sugere-se a leitura, de <strong>pelo menos</strong>, <em>Casa</em> e <em>Jogo</em>.
Especificamente em Jogo, encontra-se os dois únicos métodos modificadores que a GUI usa para controlar o jogo: <code>jogarDados()</code> e <code>escolherCasa(Casa casaEscolhida)</code>
 (Obviamente, a GUI usa de vários métodos de diferentes classes para 
desenhar na tela, mas somente esses dois "modificam" o estado do jogo. <strong>Ou seja, a principal parte desse trabalho se concentra nesses dois métodos</strong>).</p>
<p>Quanto a classe <em>Casa</em>, existem vários tipos diferentes dela em todo o tabuleiro:</p>
<p><img src="assets/casas.png" alt="Casas"></p>
<p>A tabela a seguir relaciona os retornos de vários métodos da classe com o número atribuído na imagem acima:</p>
<table>
<thead>
<tr>
<th align="center">*</th>
<th align="center">casaFinal()</th>
<th align="center">pertenceGuarita()</th>
<th align="center">ehEntradaDaZonaSegura()</th>
<th align="center">getCor()</th>
<th align="center">getCasaAnterior() == null</th>
<th align="center">getCasaSeguinte() == null</th>
<th align="center">getCasaSegura() == null</th>
</tr>
</thead>
<tbody><tr>
<td align="center">I</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">VERMELHO</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">II</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">VERMELHO</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">III</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">BRANCO</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">IV</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">BRANCO</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">V</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">AZUL</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">VI</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">AZUL</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">VII</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">AZUL</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">true</td>
</tr>
</tbody></table>
<p>Finalmente, para uma melhor e correta interação com a GUI, 
recomenda-se o uso do método Casa.setQuantidadePecas​(int quantidade) na
 casa final. Ao atribuir esta propriedade a uma casa (não 
necessariamente a casa final), a interface gráfica exibirá seu 
respectivo valor, desde que seja um inteiro maior ou igual a 2:</p>
<p><img src="assets/indicadores.png" alt="Indicadores"></p>
<p>Por fim, o método Jogo.getJogadorDaVez() pode ser alterado para 
retornar a cor do jogador que deve agir no turno. Ao fazer isso, a GUI 
destacará a guarita desse jogador.</p>
</div>

    <!-- <script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"></script>
    <script>
        function setMarkdownDocument(text) {
            var converter = new showdown.Converter();
            showdown.setFlavor('vanilla');
            document.getElementById('content').innerHTML = converter.makeHtml(text);
        }
    </script> -->

    <!-- <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script> -->
    <script>
        function setMarkdownDocument(text) {
            document.getElementById('content').innerHTML = marked(text);
        }
    </script>

    <script>
        var req = new XMLHttpRequest();
        req.onload = function () {
            setMarkdownDocument(this.responseText);
        };
        req.open('GET', './documentacao.md');
        req.send();
    </script>


</body></html>
